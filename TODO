########################### todo

live-across-block values
position independent code
alloca and global data alignment
function arguments
	- r8 and r9 handling
	- arguments > 6 handling
	- callee save registers
	- i386 function call ABI

########################### ideas

decide whether to make register save/restore on call explicit in ir

########################### optimisations

regalloc improvements

1) stack allocations mirror register allocations - reuse stack across blocks
2) attempt to have values which need to be spilt assigned

e.g.

$something = i4()
{
	$a = call $f()
	$b = call $f()
	$c = call $f()

	$x = add $a, $b
	$y = add $x, $c

	ret $y
}

$a and $b need to be spilt so should be allocated on stack

3) If a value is an argument, try not to set live_across_blocks for it.
For example, if it's live in only the first block, it doesn't need to persist.
Otherwise it does as it must survive all other blocks to make it to the block
where it is used.
